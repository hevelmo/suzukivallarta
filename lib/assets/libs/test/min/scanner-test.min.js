require("./helper");var Scanner=Mustache.Scanner;describe("A new Mustache.Scanner",function(){describe("for an empty string",function(){it("is at the end",function(){var e=new Scanner("");assert(e.eos())})}),describe("for a non-empty string",function(){var e;beforeEach(function(){e=new Scanner("a b c")}),describe("scan",function(){describe("when the RegExp matches the entire string",function(){it("returns the entire string",function(){var t=e.scan(/a b c/);assert.equal(t,e.string),assert(e.eos())})}),describe("when the RegExp matches at index 0",function(){it("returns the portion of the string that matched",function(){var t=e.scan(/a/);assert.equal(t,"a"),assert.equal(e.pos,1)})}),describe("when the RegExp matches at some index other than 0",function(){it("returns the empty string",function(){var t=e.scan(/b/);assert.equal(t,""),assert.equal(e.pos,0)})}),describe("when the RegExp does not match",function(){it("returns the empty string",function(){var t=e.scan(/z/);assert.equal(t,""),assert.equal(e.pos,0)})})}),describe("scanUntil",function(){describe("when the RegExp matches at index 0",function(){it("returns the empty string",function(){var t=e.scanUntil(/a/);assert.equal(t,""),assert.equal(e.pos,0)})}),describe("when the RegExp matches at some index other than 0",function(){it("returns the string up to that index",function(){var t=e.scanUntil(/b/);assert.equal(t,"a "),assert.equal(e.pos,2)})}),describe("when the RegExp does not match",function(){it("returns the entire string",function(){var t=e.scanUntil(/z/);assert.equal(t,e.string),assert(e.eos())})})})})});