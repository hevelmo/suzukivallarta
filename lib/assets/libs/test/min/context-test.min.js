require("./helper");var Context=Mustache.Context;describe("A new Mustache.Context",function(){var e;beforeEach(function(){e=new Context({name:"parent",message:"hi",a:{b:"b"}})}),it("is able to lookup properties of its own view",function(){assert.equal(e.lookup("name"),"parent")}),it("is able to lookup nested properties of its own view",function(){assert.equal(e.lookup("a.b"),"b")}),describe("when pushed",function(){beforeEach(function(){e=e.push({name:"child",c:{d:"d"}})}),it("returns the child context",function(){assert.equal(e.view.name,"child"),assert.equal(e.parent.view.name,"parent")}),it("is able to lookup properties of its own view",function(){assert.equal(e.lookup("name"),"child")}),it("is able to lookup properties of the parent context's view",function(){assert.equal(e.lookup("message"),"hi")}),it("is able to lookup nested properties of its own view",function(){assert.equal(e.lookup("c.d"),"d")}),it("is able to lookup nested properties of its parent view",function(){assert.equal(e.lookup("a.b"),"b")})})}),describe("A Mustache.Context",function(){describe("with an empty string in the lookup chain",function(){var e,t;beforeEach(function(){e={a:""},e.a.b="value",t=new Context(e)}),it("is able to lookup a nested property",function(){assert.equal(t.lookup("a.b"),e.a.b)})})});